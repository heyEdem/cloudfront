AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template for creating IAM Groups, Users, Secrets Manager, S3, EC2, EventBridge Rule, and Lambda Function."

Parameters:
  SecretName:
    Type: String
    Default: OTPSecret
    Description: Name of the secret in Secrets Manager to store the one-time password.

Resources:
  # Create a Secrets Manager Secret for the One-Time Password
  OTPSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref SecretName
      GenerateSecretString:
        SecretStringTemplate: '{"password": ""}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # IAM Group for S3 Read Access
  S3UserGroup:
    Type: AWS::IAM::Group

  # IAM Group for EC2 Read Access
  EC2UserGroup:
    Type: AWS::IAM::Group

  # IAM Policy for S3 Read Access
  S3ReadPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3ReadAccess
      Groups:
        - !Ref S3UserGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - "*"

  # IAM Policy for EC2 Read Access
  EC2ReadPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EC2ReadAccess
      Groups:
        - !Ref EC2UserGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:Describe*
            Resource:
              - "*"

  # Lambda Function to Log User Email and Temporary Password
  LogUserCreationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def handler(event, context):
              user_name = event['detail']['requestParameters']['userName']
              email_param_name = f"/user/{user_name}/email"
              otp_secret_name = "OTPSecret"

              ssm_client = boto3.client('ssm')
              secrets_client = boto3.client('secretsmanager')

              # Retrieve email from Parameter Store
              try:
                  email_response = ssm_client.get_parameter(Name=email_param_name)
                  email = email_response['Parameter']['Value']
              except ssm_client.exceptions.ParameterNotFound:
                  email = "Email not found"

              # Retrieve OTP from Secrets Manager
              otp_response = secrets_client.get_secret_value(SecretId=otp_secret_name)
              otp = json.loads(otp_response['SecretString'])['password']

              print(f"User Created: {user_name}, Email: {email}, OTP: {otp}")
              return {
                  'statusCode': 200,
                  'body': json.dumps('User creation logged successfully.')
              }
      Runtime: python3.9
      Timeout: 10

  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"

  # EventBridge Rule to Trigger Lambda on New User Creation
  CreateUserEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.iam
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - iam.amazonaws.com
          eventName:
            - CreateUser  # Changed from CreateLoginProfile to CreateUser
      Targets:
        - Arn: !GetAtt LogUserCreationLambdaFunction.Arn
          Id: TargetFunctionV1

  # Parameter Store Entries for User Emails
  S3UserEmailParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /user/s3-user/email
      Type: String
      Value: s3-user@example.com

  EC2UserEmailParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /user/ec2-user/email
      Type: String
      Value: ec2-user@example.com

  # IAM User for S3 Access
  S3User:
    Type: AWS::IAM::User
    Properties:
      UserName: s3-user
      Groups:
        - !Ref S3UserGroup
      LoginProfile:
        Password: !Join ['', ['{{resolve:secretsmanager:', !Ref OTPSecret, ':SecretString:password}}']]
        PasswordResetRequired: true

  # IAM User for EC2 Access
  EC2User:
    Type: AWS::IAM::User
    Properties:
      UserName: ec2-user
      Groups:
        - !Ref EC2UserGroup
      LoginProfile:
        Password: !Join ['', ['{{resolve:secretsmanager:', !Ref OTPSecret, ':SecretString:password}}']]
        PasswordResetRequired: true

Outputs:
  OTPSecretArn:
    Description: "ARN of the Secrets Manager Secret containing the one-time password."
    Value: !Ref OTPSecret

  S3UserEmail:
    Description: "Email of the S3 User stored in Parameter Store."
    Value: !Ref S3UserEmailParameter

  EC2UserEmail:
    Description: "Email of the EC2 User stored in Parameter Store."
    Value: !Ref EC2UserEmailParameter
